[RESUME]
un philosophe [mange] OU [dors] OU [pense] (dans cet ordre)
.
si un philosophe ne [mange] pas pdt []
.
les philosophes ne peuvent pas communiquer entre eux -> ils ne peuvent pas savoir qd l un d eux va mourir
.
les philosophes ne doivent pas mourir
.
[REGLES]
variables globales interdites
.
Libft interdite
-*- arguments du main
[number_of_philosophers] = nombre de philosophes <=> nombre de fourchettes
[time_to_die] (ms) = temps imparti avant la mort d un philosophe depuis le DEBUT de son dernier repas
[time_to_eaat] (ms) = temps que met un philosophe pour manger <=> temps qu il garde ses fourchettes
[time_to_sleep] (ms) = temps qu un philosophe passe a dormir
[number_of_times_each_philosopher_must_eat] = si TOUS les philosophes ont mange tant de fois, la simulation s arrete (si pas specifiee -> simulation s arrete a la mort d un philosophe)
-*- positionnement
chaque philosophe a un numero [n] avec 1 < [n] > [number_of_philosophers]
.
{philo_1} est assis a cote de {philo_2} et {philo_n} assis entre {philo_n-1} et {philo_n+1}
-*- logs
chaque changement d etat d un philosophe doit etre formate comme : [timestamp_in_ms] [n] {[has taken a fork] / [is eating] / [is sleeping] / [is thinking] /[died]}
.
les logs ne doivent pas se melanger
.
max 10 ms entre la mort d un philosophe et le log de sa mort
.
-*- spec
chaque philosophe doit etre represente par un thread
.
si il n y a qu un philosophe -> il n y a qu une seule fourchette sur la table
.
proteger les fourchettes avec un mutex pour eviter que les philosophes les dupliquent philosophe
[FONCTIONS AUTORISEES]
-*- memset
fill memory with a constant byte
.
<string.h>
.
void *memset(void *s, int c, size_t n);
-*- printf
-*- malloc
-*- free
-*- write
-*- usleep
suspend execution for microsecond intervals (1 Âµs = 0.001 ms)
.
<unistd.h>
.
int usleep(useconds_t usec);
-*- gettimeofday
get timestamp
.
include <sys/time.h>
.
int gettimeofday(struct timeval *tv, struct timezone *tz);
-*- pthread_create
create a new thread
.
include <pthread.h>
.
int pthread_create(pthread_t *restrict thread, const pthread_attr_t *restrict attr, void *(*start_routine)(void *), void *restrict arg)
-*- pthread_detach
detach a thread
.
include <pthread.h>
.
int pthread_detach(pthread_t thread)
-*- pthread_join
join with a terminated thread
.
include <pthread.h>
.
int pthread_join(pthread_t thread, void **retval)
-*- pthread_mutex_init
initialize a mutex
.
include <pthread.h>
.
int pthread_mutex_init(pthread_mutex_t *restrict mutex, const pthread_mutexattr_t *restrict attr);
-*- pthread_mutex_destroy
destroy a mutex
.
include <pthread.h>
.
int pthread_mutex_destroy(pthread_mutex_t *mutex);
-*- pthread_mutex_lock
lock a mutex
.
include <pthread.h>
.
int pthread_mutex_lock(pthread_mutex_t *mutex);
-*- pthread_mutex_unlock
unlock a mutex
.
include <pthread.h>
.
int pthread_mutex_unlock(pthread_mutex_t *mutex);
